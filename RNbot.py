# (c) @Alone_loverBoy
# keep Credits ü§ß Kangers 


# <--imports--> #
import os
import html 

from telethon import TelegramClient
from telethon import events
from telethon import Button
from telethon.tl.functions.users import GetFullUserRequest 

# <-- Config -->
API_ID = int(os.environ.get("API_ID", 6))
API_HASH = os.environ.get("API_HASH", "")
TOKEN = os.environ.get("TOKEN", "")
FRWD_GP = os.environ.get("FRWD_GP", None) 
if FRWD_GP is not None:
       try:
           FRWD_GP = int(FRWD_GP)
       except ValueError:
           raise ValueError( 
               "Invalid Group ID. Make sure your ID is starts with -100 and make sure that it is only numbers.")

ABT = """ 
üèÜ·¥Ä ô·¥è·¥ú·¥õ ·¥õ·¥á·¥Ä·¥ç ·¥Ñ·¥ès·¥ç…™·¥ÑüèÜ

üåÄ·¥õ·¥Ä…¢ :- „Äé‚ç£∆¨¬¢‚ç£„Äè

üåÄ ô·¥á…¥·¥á“ì…™·¥õs :-
‚ú®24/7 s·¥ú·¥ò·¥ò·¥è Ä·¥õ
‚ú®·¥Ä ü·¥°·¥Ä ès  ú·¥á ü·¥òs …™…¥  ü·¥á·¥Ä Ä…¥…™…¥…¢ …¥·¥á·¥° ·¥õ ú…™…¥…¢s
‚ú® ú·¥á ü·¥òs …™…¥ …™·¥ç·¥ò Ä·¥è·¥†…™…¥…¢ ·¥ã…¥·¥è·¥° ü·¥á·¥Ö…¢·¥á , ·¥á·¥õ·¥Ñ.

üåÄ Ä·¥ú ü·¥ás :-
üéñÔ∏è·¥ç·¥ús·¥õ ·¥Ä·¥Ö·¥Ö ·¥õ·¥Ä…¢ …™…¥ …¥·¥Ä·¥ç·¥á
üéñÔ∏è Ä·¥ás·¥ò·¥á·¥Ñ·¥õ ·¥è·¥õ ú·¥á Äs
üéñÔ∏è·¥Ä ü·¥°·¥Ä ès  ú·¥á ü·¥ò ·¥è·¥õ ú·¥á Äs

üåã…¥·¥è·¥õ·¥á :- ·¥Ö·¥è…¥'·¥õ  ô·¥á…¢ “ì·¥è Ä ·¥ò Ä·¥è·¥ç·¥è·¥õ…™·¥è…¥ …™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è
""" 

# <--Client--> 

bot = TelegramClient("loverboyXD", API_ID, API_HASH).start(bot_token=TOKEN)

#<--START_MESSAGE--> 

@bot.on(events.NewMessage(pattern="/start"))
async def start(event):  
      sender = await event.get_sender()
      xx = sender.first_name
      await bot.send_message(event.chat_id, f"Hey!\n {xx} How are you?‚ò∫Ô∏è\n\n·¥õ ú…™s …™s ·¥è·¥ú Ä ·¥è“ì“ì…™·¥Ñ…™·¥Ä ü ·¥á…¥·¥õ Ä è  ô·¥è·¥õ ·¥è“ì ·¥õ·¥á·¥Ä·¥ç ·¥Ñ·¥ès·¥ç…™·¥Ñ\
      \nüîπ…™…¥ ·¥õ ú…™s  ô·¥è·¥õ ·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä·¥ò·¥ò ü è ·¥õ·¥è ·¥è·¥ú Ä ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è ·¥°…™·¥õ ú ·¥ú Ä ·¥è·¥ò s·¥ã…™ ü üs ·¥ä·¥ús·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥°üîπ\n\n Choose Why are you Here by Having Clicks on Buttons Below :)", buttons=[
      [
            Button.inline("·¥Ä·¥ò·¥ò ü è ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è", data="aply")
         ],
         [
            Button.inline("C·¥è…¥·¥Ä·¥õ·¥Ñ·¥õ ·¥ús", data="contact"),
            Button.inline("·¥Ä ô·¥è·¥ú·¥õ ·¥è·¥ú Ä ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è", data="abt")
            ] 
            ]) 
# <-- CallBacks --> 

@bot.on(events.callbackquery.CallbackQuery(data="abt"))
async def abt(event):  
        await event.delete()
        await bot.send_message(event.chat_id, ABT)
  
@bot.on(events.callbackquery.CallbackQuery(data="aply"))
async def aply(event): 
      await event.delete()
      sender = await event.get_sender()
      first_name = sender.first_name 
      await bot.send_message(event.chat_id, f" ú…™ {first_name} s·¥è ·¥ú Ä  ú·¥á Ä·¥á ·¥õ·¥è ·¥Ä·¥ò·¥ò ü è “ì·¥è Ä ·¥è·¥ú Ä ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è\
      \n“ì·¥è Ä ·¥á…¥·¥õ Ä è ·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è s·¥á ü·¥á·¥Ñ·¥õ ·¥õ ú·¥Ä·¥õ ·¥õ ú·¥á s·¥ã…™ ü üs ·¥° ú·¥Ä·¥õ ·¥ú ·¥ã…¥·¥è·¥°\
      \n“ì Ä·¥è·¥ç ·¥õ ú·¥á  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥s ·¥ú ·¥°…™ ü ü …¢·¥á·¥õ ·¥ç·¥Ä…¥ è s·¥ã…™ ü üs …™…¥ ·¥õ ú·¥Ä·¥õ ·¥ú  ú·¥Ä·¥†·¥á ·¥õ·¥è s·¥á ü·¥á·¥Ñ·¥õ ·¥ú Ä s·¥ã…™ ü üs ·¥õ ú·¥Ä·¥õ ·¥ú ·¥ã…¥·¥è·¥° ·¥†·¥á Ä è ·¥°·¥á ü ü\
      \n…™…¥  ô·¥á·¥õ·¥°·¥á·¥á…¥ ·¥ú ·¥°…™ ü ü  ô·¥á ·¥õ·¥Ä·¥ã·¥á…¥ ·¥Ä s·¥ç·¥Ä ü ü ·¥õ·¥ás·¥õ ·¥Ä…¥·¥Ö ·¥á…¥·¥õ Ä è ·¥°…™ ü ü  ô·¥á …¢…™·¥†·¥á…¥\
      \n\n\n…¥·¥è·¥õ·¥á :- ‚Å±·∂† ·µÉ‚Åø ∏ ·µí·∂† ·µó ∞·µâ ·µá·µâÀ°·µí ∑ ·µá·µò·µó·µó·µí‚ÅøÀ¢ ·µà‚Å±·µà‚Åø'·µó  ∑·µí ≥·µè ·µò ·∂ú·µÉ‚Åø À¢·µÉ ∏ ·µÉ·µá·µí·µò·µó ‚Å±·µó ‚Å±‚Åø ·µí·µò ≥ À¢·µò·µñ·µñ·µí ≥·µó", buttons=[
      [
        Button.inline("Logo making", data="log"),
        Button.inline('Binning', data="bin")
        ],
        [
          Button.inline("Hacking/cc checker maker", data="bints"),
          Button.inline("Cracker", data="ckr")
        ],
        [
          Button.inline("Developer/dumper", data="dev")
        ],
        [
          Button.inline("Config/Combo Maker", data="ccmake"),
          Button.inline("Cc Spammer/bomber", data="ccspamr")
        ],
        [
        Button.inline("Docker", data="dokr")
        ],
        [
          Button.inline("Backüßë‚Äçü¶Ø", data="menu")]
        ])
        
    
# <-- Contact --> 
@bot.on(events.callbackquery.CallbackQuery(data="contact"))
async def contact(event):
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"Hey [{first_name}](tg://user?id={xx}) can Our Community Moderators at\nHERE==>[CONTACT US](https://t.me/TC_ENTRY)<==", buttons=[
           Button.inline("Backüßë‚Äçü¶Ø", data="menu")])

# <-- Back Button -->
@bot.on(events.callbackquery.CallbackQuery(data="menu"))
async def menu(back):
        await back.delete()
        await bot.send_message(back.chat_id, "·¥õ ú…™s …™s ·¥è·¥ú Ä ·¥è“ì“ì…™·¥Ñ…™·¥Ä ü ·¥á…¥·¥õ Ä è  ô·¥è·¥õ ·¥è“ì ·¥õ·¥á·¥Ä·¥ç ·¥Ñ·¥ès·¥ç…™·¥Ñ\
        \nüîπ…™…¥ ·¥õ ú…™s  ô·¥è·¥õ ·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä·¥ò·¥ò ü è ·¥õ·¥è ·¥è·¥ú Ä ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è ·¥°…™·¥õ ú ·¥ú Ä ·¥è·¥ò s·¥ã…™ ü üs ·¥ä·¥ús·¥õ ·¥Ñ ü…™·¥Ñ·¥ã ·¥õ ú·¥á  ô·¥ú·¥õ·¥õ·¥è…¥  ô·¥á ü·¥è·¥°üîπ\n\n Choose Why are you Here by Having Clicks on Buttons Below :)", buttons=[
        [
            Button.inline("·¥Ä·¥ò·¥ò ü è ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è", data="aply")
            ],
            [
            Button.inline("C·¥è…¥·¥Ä·¥õ·¥Ñ·¥õ ·¥ús", data="contact"),
            Button.inline("·¥Ä ô·¥è·¥ú·¥õ ·¥è·¥ú Ä ·¥Ñ·¥è·¥ç·¥ç·¥ú…¥…™·¥õ è", data="abt")
            ]])
            
 # <-- Skills CallBack -->
@bot.on(events.callbackquery.CallbackQuery(data="log"))
async def log(event):
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"__Hey [{first_name}](tg://user?id={xx})  You Have Sucessfully__ applied for `Logo Making` __for our Community!__\n\n**We need to check your Skills.! PLEASE Come to** [Skills Tester MODERATORS](https://t.me/TC_ENTRY) **For Test**")
        tosend = f"Hey MODERATORS [{first_name}](tg://user?id={xx}) Has Applied for `Logo Making` Skill\n\nPlease Have Test of [{first_name}](tg://user?id={xx})'s Skills!\n\nUSER INFO:\n‚Ä¢ID: {xx}\n‚Ä¢Name: {first_name}\n‚Ä¢Username: {sender.username}‚Ä¢\nProfile Link: [Link](tg://user?id={xx})"
        await bot.send_message(FRWD_GP, tosend)

@bot.on(events.callbackquery.CallbackQuery(data="bin"))
async def bin(event): 
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"__Hey [{first_name}](tg://user?id={xx})  You Have Sucessfully__ applied for `Binning` __for our Community!__\n\n**We need to check your Skills.! PLEASE Come to** [Skills Tester MODERATORS](https://t.me/TC_ENTRY) For Test**.")
        tosend = f"Hey MODERATORS [{first_name}](tg://user?id={xx}) Has Applied for `Binning` Skill\n\nPlease Have Test of [{first_name}](tg://user?id={xx}) 's Skills!\n\nUSER INFO:\n‚Ä¢ID: {xx}\n‚Ä¢Name: {first_name}\n‚Ä¢Username: {sender.username}‚Ä¢\nProfile Link: [Link](tg://user?id={xx})"
        await bot.send_message(FRWD_GP, tosend)

@bot.on(events.callbackquery.CallbackQuery(data="bints"))
async def bints(event):
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"__Hey [{first_name}](tg://user?id={xx})  You Have Sucessfully__ applied for `Hacking/cc checker maker` __for our Community!__\n\n**We need to check your Skills.! PLEASE Come to** [Skills Tester MODERATORS](https://t.me/TC_ENTRY) **For Test**")
        tosend = f"Hey MODERATORS [{first_name}](tg://user?id={xx}) Has Applied for `Bin Tester` Skill\n\nPlease Have Test of 's Skills!\n\nUSER INFO:\n‚Ä¢ID: {xx}\n‚Ä¢Name: {first_name}\n‚Ä¢Username: {sender.username}‚Ä¢\nProfile Link: [Link](tg://user?id={xx})"
        await bot.send_message(FRWD_GP, tosend)

@bot.on(events.callbackquery.CallbackQuery(data="ckr"))
async def ckr(event):
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"__Hey [{first_name}](tg://user?id={xx})  You Have Sucessfully__ applied for `Cracker` __for our Community!__\n\n**We need to check your Skills.! PLEASE Come to** [Skills Tester MODERATORS](https://t.me/TC_ENTRY) **For Test**")
        tosend = f"Hey MODERATORS [{first_name}](tg://user?id={xx}) Has Applied for `Cracker` Skill\n\nPlease Have Test of [{first_name}](tg://user?id={xx}) 's Skills!\n\nUSER INFO:\n‚Ä¢ID: {xx}\n‚Ä¢Name: {first_name}\n‚Ä¢Username: {sender.username}‚Ä¢\nProfile Link: [Link](tg://user?id={xx})"
        await bot.send_message(FRWD_GP, tosend)
            
@bot.on(events.callbackquery.CallbackQuery(data="dev"))
async def dev(event):
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"__Hey [{first_name}](tg://user?id={xx})  You Have Sucessfully__ applied for `Developer/dumper` __for our Community!__\n\n**We need to check your Skills.! PLEASE Come to** [Skills Tester MODERATORS](https://t.me/TC_ENTRY) **For Test**")
        tosend = f"Hey MODERATORS [{first_name}](tg://user?id={xx}) Has Applied for `Developer` Skill\n\nPlease Have Test of [{first_name}](tg://user?id={xx}) 's Skills!\n\nUSER INFO:\n‚Ä¢ID: {xx}\n‚Ä¢Name: {first_name}\n‚Ä¢Username: {sender.username}‚Ä¢\nProfile Link: [Link](tg://user?id={xx})"
        await bot.send_message(FRWD_GP, tosend)

@bot.on(events.callbackquery.CallbackQuery(data="dokr"))
async def dokr(event):
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"__Hey [{first_name}](tg://user?id={xx})  You Have Sucessfully__ applied for `Docker` __for our Community!__\n\n**We need to check your Skills.! PLEASE Come to** [Skills Tester MODERATORS](https://t.me/TC_ENTRY) **For Test**")
        tosend = f"Hey MODERATORS [{first_name}](tg://user?id={xx}) Has Applied for `Docker` Skill\n\nPlease Have Test of [{first_name}](tg://user?id={xx}) 's Skills!\n\nUSER INFO:\n‚Ä¢ID: {xx}\n‚Ä¢Name: {first_name}\n‚Ä¢Username: {sender.username}‚Ä¢\nProfile Link: [Link](tg://user?id={xx})"
        await bot.send_message(FRWD_GP, tosend)
        
@bot.on(events.callbackquery.CallbackQuery(data="ccmake"))
async def ccmake(event):
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"__Hey [{first_name}](tg://user?id={xx})  You Have Sucessfully__ applied for `Config maker/combo maker` __for our Community!__\n\n**We need to check your Skills.! PLEASE Come to** [Skills Tester MODERATORS](https://t.me/TC_ENTRY) For Test**.")
        tosend = f"Hey MODERATORS [{first_name}](tg://user?id={xx}) Has Applied for `CCMaker` Skill\n\nPlease Have Test of [{first_name}](tg://user?id={xx}) 's Skills!\n\nUSER INFO:\n‚Ä¢ID: {xx}\n‚Ä¢Name: {first_name}\n‚Ä¢Username: {sender.username}‚Ä¢\nProfile Link: [Link](tg://user?id={xx})"
        await bot.send_message(FRWD_GP, tosend)

@bot.on(events.callbackquery.CallbackQuery(data="ccspmr"))
async def spmr(event):  
        sender = await event.get_sender()
        first_name = sender.first_name 
        xx = sender.id
        await event.edit(f"__Hey [{first_name}](tg://user?id={xx})  You Have Sucessfully__ applied for `CC Spammer/bomber` __for our Community!__\n\n**We need to check your Skills.! PLEASE Come to** [Skills Tester MODERATORS](https://t.me/TC_ENTRY) For Test**.")
        tosend = f"Hey MODERATORS [{first_name}](tg://user?id={xx}) Has Applied for `CC Spammer` Skill\n\nPlease Have Test of [{first_name}](tg://user?id={xx}) 's Skills!\n\nUSER INFO:\n‚Ä¢ID: {xx}\n‚Ä¢Name: {first_name}\n‚Ä¢Username: {sender.username}‚Ä¢\nProfile Link: [Link](tg://user?id={xx})"
        await bot.send_message(FRWD_GP, tosend)
        
    # <--User Message frwdr--> 
    
@bot.on(events.NewMessage(func=lambda e: e.is_private))
async def one_new_mssg(event):
    incoming = event.raw_text
    who = event.sender_id
    
    if incoming.startswith("/"):
        pass
    else:
        await event.get_sender()
        event.chat_id
        await event.forward_to(FRWD_GP)
# <-- Start-Up --> 
#     ‚Üì‚Üì‚Üì‚Üì‚Üì‚Üì
# To Start BotüòÑ 
bot.start() 
# To Run all Codes 
bot.run_until_disconnected()
